{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/post.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","React","memo","posts","onSelectPostDetail","selectedPost","onSelectPostTitle","className","map","post","key","id","userId","title","type","onClick","event","target","textContent","propTypes","PropTypes","shape","arrayOf","number","isRequired","string","body","func","request","url","options","fetch","then","response","ok","Error","json","getComments","postId","result","data","comments","filter","comment","NewCommentForm","updateComments","useState","name","setName","email","setEmail","setComment","getNewComments","idOfPost","a","newComments","handleSubmitForm","bodyData","method","headers","JSON","stringify","onSubmit","preventDefault","placeholder","value","onChange","Loader","PostDetails","postTitle","showComment","isShow","deleteComment","includes","length","App","setPostDetail","setPostTitle","loadPosts","setComments","useEffect","postsFromServer","fetchData","fetchComment","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9fa41ac.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = React.memo(\n  ({ posts, onSelectPostDetail, selectedPost, onSelectPostTitle }) => (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}] :`}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={(event) => {\n                if (event.target.textContent === 'Close') {\n                  onSelectPostDetail(null);\n\n                  return;\n                }\n\n                onSelectPostDetail(post.id);\n                onSelectPostTitle(post.title);\n              }}\n            >\n              {selectedPost === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  ),\n);\n\nPostsList.propTypes = PropTypes.shape({\n  posts: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n  }).isRequired,\n  onSelectPostDetail: PropTypes.func.isRequired,\n  onSelectPostTitle: PropTypes.func.isRequired,\n  selectedPost: PropTypes.number.isRequired,\n}).isRequired;\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error('Error notification');\n    }\n\n    return response.json();\n  });\n","import { request } from './api';\n\nconst BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getUserPosts = postId => request(`/posts/${postId}`)\n  .then(result => result.data);\n\nexport const getPosts = postsRequest => request(`${postsRequest}`)\n  .then(result => result.data);\n\nexport const getComments = postId => request(`/comments`)\n  .then(result => result.data)\n  .then(comments => comments.filter(comment => comment.postId === postId));\n\nexport const removeComment = (postId) => {\n  fetch(`${BASE_URL}/comments/${postId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postComment = (bodyData) => {\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Context-type': 'application/json;charset=UTF-8',\n    },\n    body: JSON.stringify(bodyData),\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { postComment, getComments } from '../../api/post';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const getNewComments = async(idOfPost) => {\n    const newComments = await getComments(idOfPost);\n\n    updateComments(newComments);\n  };\n\n  const handleSubmitForm = () => {\n    postComment({\n      postId,\n      name,\n      email,\n      comment,\n    });\n\n    setName('');\n    setEmail('');\n    setComment('');\n\n    getNewComments(postId);\n  };\n\n  const handleNameInput = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailInput = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const handleCommentsInput = (event) => {\n    setComment(event.target.value);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        handleSubmitForm();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleNameInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleEmailInput}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={handleCommentsInput}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = PropTypes.shape({\n  postId: PropTypes.string.isRequired,\n  updateComments: PropTypes.func.isRequired,\n}).isRequired;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\nimport { removeComment } from '../../api/post';\n\nexport const PostDetails = React.memo(\n  ({\n    selectedPost,\n    comments,\n    updateComments,\n    postTitle,\n  }) => {\n    const [showComment, isShow] = useState(false);\n\n    const deleteComment = (id) => {\n      removeComment(id);\n\n      updateComments(comments.filter(comment => comment.id !== id));\n    };\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{postTitle}</p>\n        </section>\n\n        {comments\n          ? (\n            <>\n              <section className=\"PostDetails__comments\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={(event) => {\n                    if (event.target.textContent.includes('Hide')) {\n                      isShow(false);\n\n                      return;\n                    }\n\n                    isShow(true);\n                  }}\n                >\n                  {showComment ? 'Hide'\n                    : 'Show'}\n                  {' '}\n                  {`${comments.length} comments`}\n                </button>\n\n                {showComment && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => {\n                            deleteComment(comment.id);\n                          }}\n                        >\n                          X\n                        </button>\n                        <p>{comment.name}</p>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={selectedPost}\n                    updateComments={updateComments}\n                  />\n                </div>\n              </section>\n            </>\n          )\n          : <Loader />\n        }\n      </div>\n    );\n  },\n);\n\nPostDetails.propTypes = PropTypes.shape({\n  selectedPost: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf({\n    id: PropTypes.number.isRequired,\n    postId: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n  updateComments: PropTypes.func.isRequired,\n  postTitle: PropTypes.string.isRequired,\n}).isRequired;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getPosts, getComments } from './api/post';\n\nconst App = () => {\n  const [selectedPost, setPostDetail] = useState('');\n  const [postTitle, setPostTitle] = useState('');\n  const [posts, loadPosts] = useState([]);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const postsFromServer = await getPosts('/posts');\n\n      loadPosts(postsFromServer);\n    };\n\n    fetchData();\n  }, [posts]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const fetchComment = await getComments(selectedPost);\n\n      setComments(fetchComment);\n    }\n\n    fetchData();\n  }, []);\n\n  const updateComments = useCallback(setComments, []);\n\n  const selectPostDetail = (postId) => {\n    setPostDetail(postId);\n  };\n\n  const selectPostTitle = (title) => {\n    setPostTitle(title);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select className=\"App__user-selector\">\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            onSelectPostDetail={selectPostDetail}\n            onSelectPostTitle={selectPostTitle}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        {selectedPost && (\n          <div className=\"App__content\">\n            <PostDetails\n              selectedPost={selectedPost}\n              comments={comments}\n              updateComments={updateComments}\n              postTitle={postTitle}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}